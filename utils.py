import re

import config
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from loader import bot
import random


def get_choices(lst, n=3):
    unique_indices = set()
    result = []
    
    while len(result) < n:
        index = random.randint(0, len(lst) - 1)
        if index not in unique_indices:
            unique_indices.add(index)
            result.append(lst[index])

    return result

async def lose_notify(msg: str, photo: str):
    return await bot.send_photo(
        config.CHANNEL_ID,
        photo,
        f"<b>–ü—Ä–æ–∏–≥—Ä—ã—à! {msg}\n\n"
        "<blockquote>"
        "–ö –¥–æ—Å—Ç–æ–π–Ω–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—É—Ç–µ–π.\n–ü—Ä–æ–≤–∞–ª –Ω–µ –ø–æ–≤–æ–¥ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è!"
        "</blockquote>\n\n"
        f'<a href="{config.RULES_LINK}">–ü—Ä–∞–≤–∏–ª–∞</a> | '
        f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a></b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    "‚ö°Ô∏è –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç",
                    config.INVOICE_LINK
                )],
                [InlineKeyboardButton(
                    "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                    config.TOPUP_CARD_LINK
                )],
                [InlineKeyboardButton(
                    "‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                    config.TERMS_LINK
                )],
            ]
        )
    )


async def win_notify(sum: int, msg: str, photo: str):
    return await bot.send_photo(
        config.CHANNEL_ID,
        photo,
        f"<b>–ü–æ–±–µ–¥–∞! {msg}\n\n"
        "<blockquote>"
        f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –∑–∞—á–∏—Å–ª–µ–Ω –≤—ã–∏–≥—Ä—ã—à {sum} $.\n"
        "–û–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É —Å–ø–æ–ª–Ω–∞ –∏ –ø–æ–∑–Ω–∞–π—Ç–µ –ø—É—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ø–æ –∂–∏–∑–Ω–∏!"
        "</blockquote>\n\n"
        f'<a href="{config.RULES_LINK}">–ü—Ä–∞–≤–∏–ª–∞</a> | '
        f'<a href="{config.SUPPORT_LINK}">–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞</a></b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    "‚ö°Ô∏è –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç",
                    config.INVOICE_LINK
                )],
                [InlineKeyboardButton(
                    "üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                    config.TOPUP_CARD_LINK
                )],
                [InlineKeyboardButton(
                    "‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ",
                    config.TERMS_LINK
                )]
            ]
        )
    )


def parse_data(msg: Message) -> dict[str, int | str]:
    return {
        "user_id": msg.entities[0].user.id,
        "name": msg.entities[0].user.first_name,
        "bid": float(re.search(r'\(\$(.*?)\)', msg.text.split('\n')[0].split()[-1]).group(1)),
        "comment": ' '.join(msg.text.split('\n')[-1].split()[1::]).lower()
    }

