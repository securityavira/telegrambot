import decimal
from datetime import datetime
from datetime import date
import random

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart, Text
from aiogram.types import CallbackQuery, ContentType, Message
from aiogram.utils import executor

import config
import games
import keyboards
import utils
import utils_db
from loader import bot, cryptopay, dp


games_dict = {
    "—á–µ—Ç": games.even_game, "–Ω–µ—á–µ—Ç": games.odd_game,
    "–∫—É–± —á–µ—Ç": games.even_game, "–∫—É–± –Ω–µ—á–µ—Ç": games.even_game,

    "–±–æ–ª—å—à–µ": games.more_game, "–º–µ–Ω—å—à–µ": games.less_game,

    "–ø–æ–±–µ–¥–∞1": games.first_win, "–ø–æ–±–µ–¥–∞2": games.second_win,

    "–±–æ—É–ª–∏–Ω–≥ –ø–æ–±–µ–¥–∞1": games.bowling_first_win,
    "–±–æ—É–ª–∏–Ω–≥ –ø–æ–±–µ–¥–∞2": games.bowling_second_win,
    "–±–æ—É–ª–∏–Ω–≥ 1": games.bowling_number, "–±–æ—É–ª–∏–Ω–≥ 2": games.bowling_number, 
    "–±–æ—É–ª–∏–Ω–≥ 3": games.bowling_number, "–±–æ—É–ª–∏–Ω–≥ 4": games.bowling_number, 
    "–±–æ—É–ª–∏–Ω–≥ 5": games.bowling_number, "–±–æ—É–ª–∏–Ω–≥ 6": games.bowling_number,

    "–º–∏–º–æ": games.darts_by, "—Ü–µ–Ω—Ç—Ä": games.darts_center,    
    '–±–µ–ª–æ–µ': games.darts_bellow, '–∫—Ä–∞—Å–Ω–æ–µ': games.darts_red,

    '–±—É–º–∞–≥–∞': games.paper, '–Ω–æ–∂–Ω–∏—Ü—ã': games.scissors, '–∫–∞–º–µ–Ω—å': games.stone,

    '—Ñ—É—Ç –≥–æ–ª': games.football_goal, '—Ñ—É—Ç –º–∏–º–æ': games.football_by,
    '–±–∞—Å–∫–µ—Ç–±–æ–ª –≥–æ–ª': games.basketball_goal, '–±–∞—Å–∫–µ—Ç–±–æ–ª –º–∏–º–æ': games.basketball_by,

    '–ø–≤–ø': games.pvp_cube, '–¥—É—ç–ª—å': games.pvp_cube,

    '–ø–ª–∏–Ω–∫–æ': games.plinko, '–ø–ª': games.plinko, 'plinko': games.plinko,

    '2–º': games.cube_two_less, '2–±': games.cube_two_more,
    '2 –º–µ–Ω—å—à–µ': games.cube_two_less, '2 –±–æ–ª—å—à–µ': games.cube_two_more,

    '—Ä—É–ª–µ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–æ–µ': games.roulette_red, '—Ä—É–ª–µ—Ç–∫–∞ —á–µ—Ä–Ω–æ–µ': games.roulette_black,
    '—Ä—É–ª–µ—Ç–∫–∞ –∑–µ–ª–µ–Ω–æ–µ': games.roulette_green,

    '—Ä—É–ª–µ—Ç–∫–∞ 0': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 1': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 2': games.roulette_number, 
    '—Ä—É–ª–µ—Ç–∫–∞ 3': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 4': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 5': games.roulette_number,
    '—Ä—É–ª–µ—Ç–∫–∞ 6': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 7': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 8': games.roulette_number, 
    '—Ä—É–ª–µ—Ç–∫–∞ 9': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 10': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 11': games.roulette_number,
    '—Ä—É–ª–µ—Ç–∫–∞ 12': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 13': games.roulette_number, '—Ä—É–ª–µ—Ç–∫–∞ 14': games.roulette_number,
}


@dp.message_handler(Text("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ–π"))
async def topup_cart(msg: Message):
    await msg.answer(
        "<b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π –Ω–∞–ø–∏—à–∏—Ç–µ - @–ù–∏–∫</b>"
    )


@dp.message_handler(Text("üí∞ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç"))
async def topup_cart(msg: Message):
    await msg.answer(
        "<b>–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞ - –õ–∏–Ω–∫</b>"
    )


@dp.callback_query_handler(
    chat_id=config.CHANNEL_ID, 
    text_startswith="finish_minigame_"
)
async def minegame_func(call: CallbackQuery):
    minigame = utils_db.get_minigame(call.data.split("_")[-1])
    user = utils_db.get_user(call.from_user.id)

    if minigame.game.user.user_id != call.from_user.id:
        return await call.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞.", 
            show_alert=True,
            cache_time=120
        )
    elif not minigame.active:
        return await call.answer(
            "‚ùå –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", 
            show_alert=True,
            cache_time=120
        )

    guessed_slots = list(map(int, minigame.guessed_slots.split()))
    mine_slots = list(map(int, minigame.mine_slots.split()))
    
    sum = round(minigame.game.bid * len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)

    minigame.active = False
    minigame.game.status = 1
    minigame.game.win_sum = decimal.Decimal(sum)

    await call.message.edit_text(
        "<b>üí£ –ú–∏–Ω—ã\n"
        f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {minigame.game.name}\n" 
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{minigame.game.bid} $</code>\n"
        f"üí≤ –¢–µ–∫—É—â–∏–π –∫–æ–æ—Ñ–∏—Ü–µ–Ω—Ç: <code>{round(len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)}x</code>\n"
        f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: <code>{round(minigame.game.bid * len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)} $</code>\n"
        f"‚úÖ –í—ã–∏–≥—Ä—ã—à</b>",
        reply_markup=keyboards.generate_mine_markup(minigame)
    )

    if sum > 1:
        return await cryptopay.send_cash(
            minigame.user_id,
            sum,
            random.randint(0, 100000000)
        )

    user.balance += decimal.Decimal(sum)
    user.cash_back -= decimal.Decimal(sum) / decimal.Decimal(100) * decimal.Decimal(7.5)

    minigame.save()
    minigame.game.save()
    user.save()


@dp.callback_query_handler(
    chat_id=config.CHANNEL_ID, 
    text_startswith="minegame_"
)
async def minegame_func(call: CallbackQuery):
    index, game_id = call.data.split("_")[1:]

    minigame = utils_db.get_minigame(game_id)

    if minigame.game.user.user_id != call.from_user.id:
        return await call.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞.", 
            show_alert=True,
            cache_time=120
        )
    elif not minigame.active:
        return await call.answer(
            "‚ùå –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", 
            show_alert=True,
            cache_time=120
        )

    guessed_slots = list(map(int, minigame.guessed_slots.split()))
    mine_slots = list(map(int, minigame.mine_slots.split()))

    if int(index) in guessed_slots:
         await call.answer()
    elif int(index) in mine_slots:
        minigame.active = False
        minigame.save()

        await call.message.edit_text(
            "<b>üí£ –ú–∏–Ω—ã\n"
            f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {minigame.game.name}\n" 
            f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{minigame.game.bid} $</code>\n"
            f"üí≤ –¢–µ–∫—É—â–∏–π –∫–æ–æ—Ñ–∏—Ü–µ–Ω—Ç: <code>{round(len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)}x</code>\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: <code>{round(minigame.game.bid * len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)} $</code>\n"
            f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à</b>",
            reply_markup=keyboards.generate_mine_markup(minigame, int(index))
        )
    else:
        minigame.guessed_slots += f" {index}"
        guessed_slots.append(index)
        minigame.save()

        await call.message.edit_text(
            "<b>üí£ –ú–∏–Ω—ã\n"
            f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {minigame.game.name}\n" 
            f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{minigame.game.bid} $</code>\n"
            f"üí≤ –¢–µ–∫—É—â–∏–π –∫–æ–æ—Ñ–∏—Ü–µ–Ω—Ç: <code>{round(len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)}x</code>\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: <code>{round(minigame.game.bid * len(guessed_slots) * (config.max_x / (25 - len(mine_slots))), 2)} $</code></b>",
            reply_markup=keyboards.generate_mine_markup(minigame)
        )


@dp.channel_post_handler(chat_id=config.CHANNEL_ID)
async def handle_bid(message: Message):
    try:
        data = utils.parse_data(message)
    except:
        return

    user = utils_db.get_user(data["user_id"])
    if user is None: user = utils_db.create_user(data["user_id"])

    await message.delete()
    await message.answer("<b>[‚úÖ] –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>")

    if data["comment"] in ["–º–∏–Ω—ã 2", "–º–∏–Ω—ã 3", "–º–∏–Ω—ã 5", "–º–∏–Ω—ã 24"]:
        game = utils_db.create_game(
            user,
            data['name'],
            data["bid"],
            data["comment"]
        )
        mine_game = utils_db.MineGame.create(
            game=game,
            mine_slots=" ".join(map(str, utils.get_choices(range(25), int(data["comment"].split()[-1]))))
        )

        markup = keyboards.generate_mine_markup(mine_game)

        return await message.answer(
            "<b>üí£ –ú–∏–Ω—ã\n"
            f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {data['name']}\n" 
            f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{data['bid']} $</code>\n"
            f"üí≤ –¢–µ–∫—É—â–∏–π –∫–æ–æ—Ñ–∏—Ü–µ–Ω—Ç: <code>0.0x</code>\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: <code>0.0 $</code></b>",
            reply_markup=markup
        )

    if data['comment'] not in games_dict:
        return await bot.send_message(
            config.CHANNEL_ID,
            "<b>[‚ùå] –û—à–∏–±–∫–∞!\n\n"
            f"@{data['name']} - –≤—ã –∑–∞–±—ã–ª–∏ –¥–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–µ–ø–æ–∑–∏—Ç—É.\n"
            "–ë—ã–ª —Å–æ–≤–µ—Ä—à—ë–Ω –≤–æ–∑–≤—Ä–∞—Ç –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. <code>–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: 10%.</code></b>"
        )

    game = utils_db.create_game(
        user,
        data['name'],
        data["bid"],
        data["comment"]
    )

    if data['comment'] in ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"] and data["bid"] >= config.SCAM_SUM:
        smile = config.knb.get(game.comment)

        await bot.send_message(
            config.CHANNEL_ID,
            "<b>üé∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞\n\n"
            f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {game.name}\n" 
            f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{game.bid} $</code>\n"
            f"üí¨ –ò—Å—Ö–æ–¥: {game.comment}</b>",
        )

        await bot.send_message(
            config.CHANNEL_ID,
            config.knb_values.get(game.comment)
        )
        await bot.send_message(
            config.CHANNEL_ID,
            smile
        )

        await utils.lose_notify(
            f"–í—ã–ø–∞–ª {config.knb_smiles.get(smile)}.",
            "https://i.imgur.com/24ZxGdy.png"
        )

        return
    
    func = games_dict.get(data['comment'])

    await bot.send_message(
        config.CHANNEL_ID,
        "<b>üé∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞\n\n"
        f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {data['name']}\n" 
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{data['bid']} $</code>\n"
        f"üí¨ –ò—Å—Ö–æ–¥: {data['comment']}</b>"
    )

    result = await func(data)
    
    if not result[0]:
        if user.referral_id:
            reward = decimal.Decimal(game.bid) / decimal.Decimal(5)

            ref_user = user.referral_id

            ref_user.balance += reward
            ref_user.save()

            await dp.bot.send_message(
                ref_user.user_id,
                f"<b>üéâ C —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <code>{round(reward, 2)}$</code></b>"
            )
        
        user.cash_back += decimal.Decimal(data["bid"]) / decimal.Decimal(100) * decimal.Decimal(7.5)
        user.save()

        try:   
            await bot.send_message(
                user.user_id, 
                f"<b>‚úÖ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω –∫–µ—à–±–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ - <code>{round(decimal.Decimal(game.bid) / decimal.Decimal(100) * decimal.Decimal(7.5), 2)} $</code></b>"
            )
        except:
            pass

        return
    if result[0] > 1:
        return await cryptopay.send_cash(
            game.user_id,
            result[0],
            random.randint(0, 100000000)
        )

    user.balance += decimal.Decimal(result[0])
    user.cash_back -= decimal.Decimal(data["bid"]) / decimal.Decimal(100) * decimal.Decimal(7.5)

    game.status = 1
    game.win_sum = decimal.Decimal(result[0])

    user.save()
    game.save()

    try:   
        await bot.send_message(
            user.user_id, 
            f"<b>üîî –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>{round(decimal.Decimal(result[0]), 2)} $</code>.</b>",
            reply_markup=keyboards.profile_markup
        )
    except:
        pass


@dp.message_handler(CommandStart())
async def start(msg: Message):
    if msg.get_args():
        user = utils_db.get_user(msg.get_args())

        if user:
            utils_db.create_user(
                msg.from_user.id,
                referral_id=user.user_id
            )

    if not utils_db.get_user(msg.from_user.id):
        if msg.get_args() and utils_db.get_user(msg.get_args()):
            utils_db.create_user(
                msg.from_user.id,
                referral_id=int(msg.get_args())
            )
        
        utils_db.create_user(
            msg.from_user.id
        )


    await msg.answer(
        f"<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {msg.from_user.mention}</b>",
        reply_markup=keyboards.user_markup
    )


@dp.message_handler(Text("üí∏ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ"))
async def balance(msg: Message):
    await msg.answer(
        f"<b>üí∏ –ë–∞–ª–∞–Ω—Å –∫–∞–∑–∏–Ω–æ - <code>{await cryptopay.balance()} $</code></b>"
    )


@dp.message_handler(Text("‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å"))
async def profile(msg: Message):
    user = utils_db.get_user(msg.from_user.id)
    games = utils_db.get_user_games(msg.from_user.id)
    referrals = utils_db.get_referrals(msg.from_user.id)

    await msg.answer(
        "<b>‚ö°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üöÄ –í—Å–µ–≥–æ –∏–≥—Ä: <code>{len(games)} —à—Ç.</code>\n"
        f"üí∏ –ë–∞–ª–∞–Ω—Å: <code>{float(user.balance)} $</code>\n\n"
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{len(referrals)} —à—Ç.</code></b>",
        reply_markup=keyboards.profile_markup
    )


@dp.message_handler(Text("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
async def referral_link(msg: Message):
    referrals = utils_db.get_referrals(msg.from_user.id)

    await msg.answer(
        "<b>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        "üí∏ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <code>20%</code> —Å –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n"
        f"‚≠êÔ∏è –ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{referrals.count()} —à—Ç.</code>\n"
        f"‚ö°Ô∏è –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - https://t.me/{(await bot.get_me()).username}?start={msg.from_user.id}</b>",
        disable_web_page_preview=True
    )


@dp.message_handler(Text("üîã –ö–µ—à–±–µ–∫"))
async def cashback(msg: Message):
    user = utils_db.get_user(msg.from_user.id)

    await msg.answer(
        "<b>üîã –ö–µ—à–±–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞\n"
        "‚îî üí† –í —Å–ª—É—á–∞–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <code>7.5%</code>.\n"
        "‚îî üí∞ –í—ã–≤–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –æ—Ç <code>5.0</code>\n"
        f"‚îî üìë –ö—ç—à–±–µ–∫-—Å—á–µ—Ç: <code>{user.cash_back} $</code></b>",
        reply_markup=keyboards.cashback_markup
    )


@dp.callback_query_handler(Text("withdraw_money"))
async def withdraw_money(call: CallbackQuery):
    user = utils_db.get_user(call.from_user.id)

    if float(user.balance) < 0.5:
        await call.answer()

        return await call.message.answer(
            "<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <code>0.5 $</code></b>"
        )
    
    balance = user.balance
    user.balance = decimal.Decimal(0)
    user.save()

    invoice = await cryptopay.create_check(float(balance))

    await call.message.answer(f"<b>üí∏ –í–∞—à —á–µ–∫ –Ω–∞ {invoice.amount} $\nüîó {invoice.bot_check_url}</b>",)
    await call.answer()

    await bot.delete_message(
        call.message.chat.id,
        call.message.message_id
    )

    game: utils_db.Game = utils_db.get_game(int(call.data.split("_")[-1]))
    smile = config.knb.get(game.comment)

    await bot.send_message(
        config.CHANNEL_ID,
        "<b>üé∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞\n\n"
        f"‚ö°Ô∏è –ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞: {game.name}\n" 
        f"üí∏ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: <code>{game.bid} $</code>\n"
        f"üí¨ –ò—Å—Ö–æ–¥: {game.comment}</b>",
    )

    await bot.send_message(
        config.CHANNEL_ID,
        config.knb_values.get(game.comment)
    )
    await bot.send_message(
        config.CHANNEL_ID,
        smile
    )

    await utils.lose_notify(
        f"–í—ã–ø–∞–ª {config.knb_smiles.get(smile)}.",
        "https://i.imgur.com/24ZxGdy.png"
    )


@dp.callback_query_handler(Text("withdraw_cashback"))
async def withdraw_cashback(call: CallbackQuery):
    user = utils_db.get_user(call.from_user.id)
    cashback = user.cash_back

    if float(user.balance) < 10.0:
        await call.answer()

        return await call.message.answer(
            "<b>‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ - <code>10 $</code></b>"
        )

    user.cash_back = decimal.Decimal(0)
    user.save()

    await cryptopay.send_cash(
        user.user_id,
        cashback,
        random.randint(0, 100000000),
        "–í—ã–ø–ª–∞—Ç–∞ –∑–∞ –∫–µ—à–±–µ–∫."
    )


@dp.message_handler(Command("admin"), chat_id=config.ADMIN_ID)
async def admin(msg: Message):
    games = utils_db.get_games()
    users = utils_db.get_all_users()

    win_games = games.where(utils_db.Game.status == 1)
    lose_games = games.where(utils_db.Game.status == 0)

    start_today = date.today()
    start_month = date.today().replace(day=1)

    await msg.answer(
        "<b>üöÄ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        "–ó–∞ –¥–µ–Ω—å\n"
        f"‚îî –ò–≥—Ä: <code>{games.where(utils_db.Game.created_at > start_today).count()} —à—Ç.</code>\n"
        f"‚îî –Æ–∑–µ—Ä–æ–≤: <code>{users.where(utils_db.User.created_at > start_today).count()} —à—Ç.</code>\n"
        f"‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{round(sum([x.bid for x in lose_games.where(utils_db.Game.created_at > start_today)]), 1)} $</code>\n"
        f"‚îî –û—Ç–¥–∞–Ω–æ: <code>{round(sum([x.win_sum for x in win_games.where(utils_db.Game.created_at > start_today)]), 1)} $</code>\n"
        "–ó–∞ –º–µ—Å—è—Ü\n"
        f"‚îî –ò–≥—Ä: <code>{games.where(utils_db.Game.created_at > start_month).count()} —à—Ç.</code>\n"
        f"‚îî –Æ–∑–µ—Ä–æ–≤: <code>{users.where(utils_db.User.created_at > start_month).count()} —à—Ç.</code>\n"
        f"‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{round(sum([x.bid for x in lose_games.where(utils_db.Game.created_at > start_month)]), 1)} $</code>\n"
        f"‚îî –û—Ç–¥–∞–Ω–æ: <code>{round(sum([x.win_sum for x in win_games.where(utils_db.Game.created_at > start_month)]), 1)} $</code>\n"
        "–í—Å–µ–≥–æ\n"
        f"‚îî –ò–≥—Ä: <code>{games.count()} —à—Ç.</code>\n"
        f"‚îî –Æ–∑–µ—Ä–æ–≤: <code>{users.count()} —à—Ç.</code>\n"
        f"‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <code>{round(sum([x.bid for x in lose_games]), 1)} $</code>\n"
        f"‚îî –û—Ç–¥–∞–Ω–æ: <code>{round(sum([x.win_sum for x in win_games]), 1)} $</code></b>\n",
        reply_markup=keyboards.admin_markup
    )


@dp.callback_query_handler(Text("cancel"), state="*")
async def cancel(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ!")
    await call.message.delete()


@dp.callback_query_handler(Text("mailing"), chat_id=config.ADMIN_ID)
async def mailing_msg(call: CallbackQuery, state: FSMContext):
    await state.set_state("mailing")
    await call.message.answer(
        "<b>‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>",
        reply_markup=keyboards.back_markup
    )


@dp.message_handler(content_types=[ContentType.ANY], state="mailing")
async def mailing(message: Message):
    await message.copy_to(
        message.from_user.id,
        reply_markup=keyboards.accept_mailing
    )


@dp.callback_query_handler(Text("start_mailing"), state="mailing")
async def accept_mail(call: CallbackQuery, state: FSMContext):
    start_time = datetime.now()
    await state.finish()

    error_count = 0

    msg = await call.message.answer(
        '<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>'
    )
    users = utils_db.get_all_users()

    for user in users:
        try:
            await call.message.copy_to(
                user.user_id, 
                reply_markup=keyboards.close_mailing
            )
        except:
            error_count += 1
            continue
    
    await msg.edit_text(
        "<b>üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <code>{len(users) - error_count} —à—Ç.</code>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <code>{error_count} —à—Ç.</code>\n"
        f"‚è≥ –í—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–æ: <code>{(datetime.now() - start_time).total_seconds():.2} c.</code></b>"
    )


@dp.callback_query_handler(Text("close_mailing"))
async def close_mailing(call: CallbackQuery):
    await call.message.delete()


@dp.callback_query_handler(Text("topup"), chat_id=config.ADMIN_ID)
async def topup(call: CallbackQuery, state: FSMContext):
    await state.set_state("topup")

    await call.message.answer(
        "<b>‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>",
        reply_markup=keyboards.back_markup
    )


@dp.message_handler(state="topup")
async def topup(msg: Message, state: FSMContext):
    try:
        sum = float(msg.text)
    except:
        return await msg.answer(
            "<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!</b>"
        )

    await state.finish()

    invoice = await cryptopay.create_invoice(sum)

    await bot.send_message(
        msg.chat.id,
        invoice.bot_invoice_url
    )


@dp.callback_query_handler(Text("create_promocode"), chat_id=config.ADMIN_ID)
async def create_promocode(call: CallbackQuery, state: FSMContext):
    await state.set_state("promocode_count")

    await call.message.answer(
        "<b>‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>",
        reply_markup=keyboards.back_markup
    )


@dp.message_handler(state="promocode_count")
async def create_promocode(msg: Message, state: FSMContext):
    if not msg.text.isdigit():
        return await msg.answer(
            "<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>"
        )
    
    await state.update_data(count=int(msg.text))

    await state.set_state("promocode_sum")

    await msg.answer(
        "<b>‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞</b>",
        reply_markup=keyboards.back_markup
    )


@dp.message_handler(state="promocode_sum")
async def create_promocode(msg: Message, state: FSMContext):
    try:
        sum = float(msg.text)
    except:
        return await msg.answer(
            "<b>‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!</b>"
        )
    
    data = await state.get_data()
    await state.finish()

    await msg.answer(
        f"<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω! –ï–≥–æ –∫–æ–¥ - <code>{utils_db.create_promocode(sum, data['count']).code}</code></b>",
    )


@dp.callback_query_handler(Text("activate_promocode"))
async def create_promocode(call: CallbackQuery, state: FSMContext):
    await state.set_state("activate_promocode")

    await call.message.answer(
        "<b>‚ö°Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥</b>",
        reply_markup=keyboards.back_markup
    )


@dp.message_handler(state="activate_promocode")
async def create_promocode(msg: Message, state: FSMContext):
    promocode = utils_db.get_promocode(msg.text)
    user = utils_db.get_user(msg.from_user.id)
    await state.finish()

    if not promocode or not promocode.activation_count:
        return await msg.answer(
            "<b>‚ùå –ü—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>"
        )
    elif utils_db.check_activation(user, promocode):
        return await msg.answer(
            "<b>‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>"
        )

    promocode.activation_count -= 1
    promocode.save()

    utils_db.create_activation(promocode, user)

    check = await cryptopay.create_check(float(promocode.sum))

    await msg.answer(
        "<b>‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
        f"üîó –°—Å—ã–ª–∫–∞: {check.bot_check_url}</b>",
    )


executor.start_polling(
    dp,
    skip_updates=True,
)
